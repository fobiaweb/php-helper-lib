<?php

namespace Fobia\Helper;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-23 at 22:53:49.
 */
class CallbackTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Callback
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Callback(function($a) {
            return $a;
        });
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers Fobia\Helper\Callback::create
     * @todo   Implement testCreate().
     */
    public function testCreate()
    {
        $c1 = Callback::create(function() { 
            return 'create'; 
        });
        $this->assertInstanceOf('Fobia\\Helper\\Callback', $c1);
    }

    /**
     * @covers Fobia\Helper\Callback::__invoke
     * @todo   Implement test__invoke().
     */
    public function test__invoke()
    {
        $this->assertTrue(is_callable($this->object));
        $c = $this->object;
        if (is_callable($this->object)) {
            $this->assertEquals(1, $c(1));
        }
    }

    /**
     * @covers Fobia\Helper\Callback::invoke
     * @todo   Implement testInvoke().
     */
    public function testInvoke()
    {
        $this->assertTrue(method_exists($this->object, 'invoke'));
        $this->assertTrue($this->object->invoke(true));
    }

    /**
     * @covers Fobia\Helper\Callback::isCallable
     * @todo   Implement testIsCallable().
     */
    public function testIsCallable()
    {
        $this->assertTrue(is_callable($this->object));
    }

    /**
     * @covers Fobia\Helper\Callback::__toString
     * @todo   Implement test__toString().
     */
    public function test__toString()
    {
        $f = function($a) {
            return $a;
        };
        $c1 = Callback::create($f);
        $c2 = Callback::create(array($c1, 'invoke'));

        $this->assertEquals('{closure}', (string) $c1);
        $this->assertEquals(get_class($c1) . '::invoke', (string) $c2);
    }

}
